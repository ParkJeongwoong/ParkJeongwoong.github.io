{"pageProps":{"markdown_gitHub":"# [GitHub Blog 개발기] Markdown Index 구현 (TOC)\r\n\r\n블로그에 길이가 긴 글들이 생기면서 \"목차\"의 필요성을 느꼈다.\r\n\r\n특히 [알고리즘 정리 글](https://parkjeongwoong.github.io/articles/Algorithm/0)은 워낙 양이 많아 반드시 목차가 필요했다.\r\n\r\n(글에선 Markdown Index라고 표현했는데, 나중에 검색을 해보니 이런 목차를 Table Of  Content, TOC라고 부른다는 것을 알았다)\r\n\r\n\r\n\r\n인덱스 기능을 추가하면서 단순한 목차에서 그치지 않고, <u>실시간으로 위치를 표시</u>하고 언제든 <u>원하는 위치로 이동</u> 할 수 있는 기능을 추가했다.\r\n\r\n\r\n\r\n## 동작 방식\r\n\r\n인덱스 기능을 구상하면서 생각했던 동작 방식은 다음과 같다.\r\n\r\n```\r\n1. 마크다운 파일에서 목차 데이터를 추출한다.\r\n2. 추출한 목차 데이터로 목차를 만든다.\r\n3. 글을 렌더링한 이후 각 항목의 위치를 찾고 목차와 연결한다.\r\n4. 기능 구현\r\n    4-1. 목차의 항목을 클릭하면 해당 위치로 이동\r\n    4-2. 스크롤을 할 때마다 이벤트를 발생시키고 현재 위치와 각 항목의 위치를 비교\r\n```\r\n\r\n\r\n\r\n## 구현\r\n\r\n### 1. 목차 데이터 추출\r\n\r\n이미  마크다운 파일을 렌더링하기 위해 파일을 읽어 문자열로 만든 변수를 가지고 있었기 때문에 쉽게 구현할 수 있었다.\r\n\r\n```react\r\n// markdown 은 이전에 만든 마크다운 파일 문자열\r\n\r\nconst index_raw = markdown.split(\"\\r\\n\");\r\nlet code_line = false;\r\n\r\nindex_raw.forEach(line => {\r\n  // 코드 라인의 주석표시(#) 무시 - 예시 코드에 있는 주석 표시들이 목차로 분류되는 문제 해결\r\n  if (/^(```)/.test(line)) {\r\n    code_line = !code_line;\r\n  }\r\n\r\n  if (!code_line) {\r\n    if (/^#####/.test(line)) {\r\n      index.push({\r\n        type: \"type5\",\r\n        data: line.replace(\"#####\", \"\").replace(/`/gi, \"\").replace(/\\*/gi, \"\"),\r\n      });\r\n    } else if (/^####/.test(line)) {\r\n      index.push({\r\n        type: \"type4\",\r\n        data: line.replace(\"####\", \"\").replace(/`/gi, \"\").replace(/\\*/gi, \"\"),\r\n      });\r\n    } else if (/^###/.test(line)) {\r\n      index.push({\r\n        type: \"type3\",\r\n        data: line\r\n          .replace(\"###\", \"\").replace(/`/gi, \"\").replace(/\\*/gi, \"\"),\r\n      });\r\n    } else if (/^##/.test(line)) {\r\n      index.push({\r\n        type: \"type2\",\r\n        data: line.replace(\"##\", \"\").replace(/`/gi, \"\").replace(/\\*/gi, \"\"),\r\n      });\r\n    } else if (/^#/.test(line)) {\r\n      index.push({\r\n        type: \"type1\",\r\n        data: line.replace(\"#\", \"\").replace(/`/gi, \"\").replace(/\\*/gi, \"\"),\r\n      });\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n([소스](https://github.com/ParkJeongwoong/ParkJeongwoong.github.io/blob/master/src/pages/articles/%5BarticleCategory%5D/index.js))\r\n\r\n### 2. 목차 생성\r\n\r\n생성된 목차를 바탕으로 화면 오른쪽에 고정된 목차를 만들었다.\r\n\r\n```react\r\n<div className={styles.MarkdownIndex}>\r\n  <div className={styles.MarkdownIndex_Button} onClick={showIndex}>\r\n    Index\r\n  </div>\r\n  <div className={styles.MarkdownIndex_Box} id=\"index_box\">\r\n    <div className={styles.MarkdownIndex_ContentBox}>\r\n      {index.map((subject, idx) => (\r\n        <div key={idx}>\r\n          <div className={styles[`offset_${subject.type}`]}></div>\r\n          <div\r\n            id={`index${idx}`}\r\n            value={idx}\r\n            className={classNames({\r\n              [styles[`MarkdownIndex_${subject.type}`]]: true,\r\n              [styles.MarkdownIndex_hover]: lastSubject != idx,\r\n              [styles.MarkdownIndex_selected]: lastSubject == idx,\r\n            })}\r\n            onClick={moveScroll}\r\n          >\r\n            {subject.data}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\n([소스](https://github.com/ParkJeongwoong/ParkJeongwoong.github.io/blob/master/src/components/Markdown/MarkdownIndex.js))\r\n\r\n### 3. 위치 정보 연결\r\n\r\n이 부분에서 처음 애를 먹었다.\r\n\r\n렌더링이 먼저 된 이후 요쇼의 위치를 목차의 항목과 연결하고 싶었는데, 자꾸 렌더링이 되기 전에 코드가 실행됐다.\r\n\r\n\r\n\r\n고민 끝에 찾은 방법은 **실제로 사용될 때 코드를 실행**하는 것이었다.\r\n\r\n글을 넓게 보고 싶은 마음에 인덱스를 항상 고정시키는 것이 아니라 버튼을 클릭하면 보이도록 만들었는데,\r\n\r\n이렇게 되면 페이지가 처음 렌더링된 시점에서 인덱스가 보이지 않으므로 굳이 화면의 요소들과 연결할 필요가 없었다.\r\n\r\n이를 이용해 [인덱스 - 화면] 연결은 <u>인덱스 버튼을 클릭</u>하는 시점에 하도록 만들었다.\r\n\r\n```react\r\n// 버튼의 onClick 이벤트인 showIndex\r\nconst showIndex = event => {\r\n  // 인덱스 토글\r\n  const index_box = document.querySelector(\"#index_box\");\r\n  index_box.style[\"display\"] = isShowIndex ? \"none\" : \"block\";\r\n  setIsShowIndex(!isShowIndex);\r\n    \r\n  // 버튼 토글\r\n  event.target.style[\"font-weight\"] = isShowIndex ? \"normal\" : \"bold\";\r\n  event.target.style[\"background-color\"] = isShowIndex\r\n    ? \"var(--main-color-dark)\"\r\n    : \"var(--main-color-deep-dark)\";\r\n    \r\n  // 1. subjectMap 생성 - 렌더링 된 요소들을 모두 찾음\r\n  if (!Object.keys(subjectMap).length) {\r\n    setSubjectMap({\r\n      type1: document.querySelectorAll(\"h1\"),\r\n      type2: document.querySelectorAll(\"h2\"),\r\n      type3: document.querySelectorAll(\"h3\"),\r\n      type4: document.querySelectorAll(\"h4\"),\r\n      type5: document.querySelectorAll(\"h5\"),\r\n    });\r\n  }\r\n};\r\n\r\n// 2. index, subjectMap -> subjectPosition(위치 정보) 생성\r\nuseEffect(() => {\r\n  if (!subjectPosition.length && Object.keys(subjectMap).length) {\r\n    const newSubjectPosition = index.map((subject, idx) => {\r\n      switch (subject.type) {\r\n        case \"type1\":\r\n          return subjectMap[subject.type][countType1++].offsetTop;\r\n        case \"type2\":\r\n          return subjectMap[subject.type][countType2++].offsetTop;\r\n        case \"type3\":\r\n          return subjectMap[subject.type][countType3++].offsetTop;\r\n        case \"type4\":\r\n          return subjectMap[subject.type][countType4++].offsetTop;\r\n        case \"type5\":\r\n          return subjectMap[subject.type][countType5++].offsetTop;\r\n      }\r\n    });\r\n    setSubjectPosition(newSubjectPosition);\r\n  }\r\n}, [\r\n  subjectMap,\r\n  index,\r\n  subjectPosition.length,\r\n  countType1,\r\n  countType2,\r\n  countType3,\r\n  countType4,\r\n  countType5,\r\n]);\r\n```\r\n\r\n([소스](https://github.com/ParkJeongwoong/ParkJeongwoong.github.io/blob/master/src/components/Markdown/MarkdownIndex.js))\r\n\r\n### 4. 기능 추가\r\n\r\n#### 4-1. 클릭 이벤트\r\n\r\n```react\r\nconst moveScroll = event => {\r\n  const targetIdx = event.target.getAttribute(\"value\");\r\n  const location = subjectPosition[Number(targetIdx)] - 80;\r\n  window.scrollTo({ top: location, behavior: \"smooth\" });\r\n};\r\n```\r\n\r\n([소스](https://github.com/ParkJeongwoong/ParkJeongwoong.github.io/blob/master/src/components/Markdown/MarkdownIndex.js))\r\n\r\n\r\n\r\n#### 4-2. 현재 위치 실시간 확인\r\n\r\n```react\r\n// 스크롤 이벤트\r\nconst [scroll, setScroll] = useState({\r\n  x: 0,\r\n  y: 0,\r\n});\r\nconst onScroll = () => {\r\n  setScroll({ y: window.scrollY, x: window.scrollX });\r\n};\r\n\r\nuseEffect(() => {\r\n  window.addEventListener(\"scroll\", onScroll);\r\n  return () => window.removeEventListener(\"scroll\", onScroll);\r\n}, []);\r\n\r\n// 스크롤 위치가 인덱스의 어느 항목에 있는지 체크\r\nuseEffect(() => {\r\n  if (subjectPosition.length) {\r\n    let i;\r\n    for (i = 1; i < subjectPosition.length; i++) {\r\n      if (scroll.y + 85 < subjectPosition[i]) {\r\n        break;\r\n      }\r\n    }\r\n    if (scroll.y + 85 >= subjectPosition[subjectPosition.length - 1]) {\r\n      i = subjectPosition.length;\r\n    }\r\n    if (scroll.y + window.innerHeight >= document.body.offsetHeight) {\r\n      i = subjectPosition.length;\r\n    }\r\n      \r\n    if (i - 1 != lastSubject) {\r\n      setLastSubject(i - 1);\r\n    }\r\n  }\r\n}, [scroll, lastSubject, subjectPosition]);\r\n```\r\n\r\n([소스](https://github.com/ParkJeongwoong/ParkJeongwoong.github.io/blob/master/src/components/Markdown/MarkdownIndex.js))\r\n","documentTitle":"[GitHub Blog 개발기] Markdown Index 구현 (TOC)","articleCategory":"Develop","articleId":"8"},"__N_SSG":true}