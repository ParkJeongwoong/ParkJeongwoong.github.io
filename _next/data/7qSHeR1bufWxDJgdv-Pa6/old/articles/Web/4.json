{"pageProps":{"markdown":"# [Spring] 생명주기 (Life Cycle)\r\n\r\n스프링에서 다룰 생성주기는 크게 [컨테이너]의 생명주기와 [빈 객체]의 생성주기로 나뉜다.\r\n\r\n\r\n\r\n## 스프링 컨테이너 생명주기\r\n\r\n**생성** - **설정** - **사용** - **소멸**\r\n\r\n\r\n\r\n- 생성\r\n  - GenericXmlApplicationContext 를 이용한 스프링 컨테이너 초기화(생성)\r\n\r\n```java\r\nGenericXmlApplicationContext ctx = new GenericXmlApplicationContext();\r\n```\r\n\r\n\r\n\r\n- 설정\r\n  - load() 를 이용한 컨테이너 설정 (<u>refresh() 를 해야 반영</u>)\r\n\r\n```java\r\nctx.load(\"classpath:applicationCTX.xml\");\r\nctx.refresh();\r\n```\r\n\r\n\r\n\r\n- 사용\r\n  - getBean() 을 이용한 Bean 객체 사용\r\n\r\n```java\r\nBookRegisterService bookRegisterService = ctx.getBean(\"bookRegisterService\", BookRegisterService.class);\r\n\r\nBookSearchService bookSearchService = ctx.getBean(\"bookSearchService\", BookSearchService.class);\r\n```\r\n\r\n\r\n\r\n- 종료\r\n  - close() 를 이용한 스프링 컨테이너 종료\r\n\r\n```java\r\nctx.close();\r\n```\r\n\r\n\r\n\r\n### 컨테이너와 빈 객체를 동시에 생성하는 방법 (컨테이너, 빈 객체 동시 생성)\r\n\r\n```java\r\nGenericXmlApplicationContext ctx = new GenericXmlApplicationContext(\"classpath:appCtx.xml\");\r\n```\r\n\r\n이 방법을 사용하면 스프링 컨테이너를 생성하면서 빈 객체도 동시에 생성된다.\r\n\r\n\r\n\r\n\r\n\r\n## Bean 객체 생명주기\r\n\r\n**Bean 객체의 생명주기는 스프링 컨테이너의 생명주기와 동일**\r\n\r\n컨테이너를 생성할 때 Bean이 생성되고, getBean()은 생성된 Bean 객체를 불러오는 것\r\n\r\n\r\n\r\n### Bean 객체 생명주기 활용법\r\n\r\n#### 1) `interface` 활용\r\n\r\n- <interface> InitializingBean 에서 `afterPropertiesSet` 을 제공 (**bean 객체 생성 시 호출**)\r\n- <interface> DisposableBean 에서 `destroy` 를 제공 (**bean 객체 소멸 시 호출**)\r\n\r\n```java\r\npublic class BookRegisterService implements InitializingBean, DisposableBean {\r\n    @Autowired\r\n    private\tBookDao bookDao;\r\n    \r\n    public BookRegisterService() {}\r\n    \r\n    public void register(Book book) {\r\n        bookDao.insert(book);\r\n    }    \r\n    \r\n    // 빈 객체 생성 시 호출\r\n    @Override\r\n    public void afterPropertiesSet() throws Exception {\r\n        System.out.println(\"BookRegisterService 빈 객체 생성 단계\")\r\n    }\r\n    \r\n    // 빈 객체 소멸 시 호출\r\n    public void destroy() throws Exception {\r\n        System.out.println(\"BookRegisterService 빈 객체 소멸 단계\")\r\n    }\r\n    \r\n}\r\n```\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    GenericXmlApplicationContext ctx = new GenericXmlApplicationContext(); // (1) 컨테이너생성\r\n    ctx.load(\"classpath:applicationCTX.xml\"); // (2) 로드\r\n    ctx.refresh(); // (3) 빈 생성(즉, 빈이 초기화 과정에서 호출된다. interface:InitializingBean, method:afterPropertiesSet() )\r\n    ctx.close(); // (4) 빈 소멸(빈 소멸 과정에서 생성 된다. interface:DisposableBean , method:destroy() )\r\n}\r\n```\r\n\r\n\r\n\r\n#### 2) `init-method`, `destroy-method` 속성 활용\r\n\r\n```xml\r\n<bean id=\"bookRegisterService\" class=\"com.brms.book.service.BookRegisterService\"\r\n      \tinit-method=\"initMethod\" destroy-method=\"destroyMethod\" />\r\n```\r\n\r\n```java\r\npublic class BookRegisterService {\r\n    @Autowired\r\n    private\tBookDao bookDao;\r\n    \r\n    public BookRegisterService() {}\r\n    \r\n    public void register(Book book) {\r\n        bookDao.insert(book);\r\n    }\r\n    \r\n    // 빈 객체 생성 시 호출\r\n    public void initMethod() {\r\n        System.out.println(\"BookRegisterService 빈 객체 생성 단계\")\r\n    }\r\n    \r\n    // 빈 객체 소멸 시 호출\r\n    public void destroyMethod() {\r\n        System.out.println(\"BookRegisterService 빈 객체 소멸 단계\")\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n#### 3) `@PostConstruct`, `@PreDestroy` 어노테이션 사용\r\n\r\n스프링 2.5이 후부터 사용 가능\r\n\r\n```java\r\npublic class BookRegisterService {\r\n    @Autowired\r\n    private\tBookDao bookDao;\r\n    \r\n    public BookRegisterService() {}\r\n    \r\n    public void register(Book book) {\r\n        bookDao.insert(book);\r\n    }\r\n    \r\n    // 빈 객체 생성 시 호출\r\n    @PostConstruct\r\n    public void initMethod() {\r\n        System.out.println(\"BookRegisterService 빈 객체 생성 단계\")\r\n    }\r\n    \r\n    // 빈 객체 소멸 시 호출\r\n    @PreDestroy\r\n    public void destroyMethod() {\r\n        System.out.println(\"BookRegisterService 빈 객체 소멸 단계\")\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## 출처\r\n\r\n인프런 - 자바 스프링 프레임워크(renew ver.) - 신입 프로그래머를 위한 강좌\r\n\r\nhttps://bkjeon1614.tistory.com/482\r\n\r\nhttps://request-response.tistory.com/11\r\n\r\nhttps://haruhiism.tistory.com/186","documentTitle":"[Spring] 생명주기 (Life Cycle)","index":[{"type":"type1","data":" [Spring] 생명주기 (Life Cycle)"},{"type":"type2","data":" 스프링 컨테이너 생명주기"},{"type":"type3","data":" 컨테이너와 빈 객체를 동시에 생성하는 방법 (컨테이너, 빈 객체 동시 생성)"},{"type":"type2","data":" Bean 객체 생명주기"},{"type":"type3","data":" Bean 객체 생명주기 활용법"},{"type":"type4","data":" 1) interface 활용"},{"type":"type4","data":" 2) init-method, destroy-method 속성 활용"},{"type":"type4","data":" 3) @PostConstruct, @PreDestroy 어노테이션 사용"},{"type":"type2","data":" 출처"}]},"__N_SSG":true}