{"pageProps":{"markdown_gitHub":"# [Spring] Spring 설정 - Java Config\r\n\r\nSpring 설정은 2가지 방법을 통해 가능하다.\r\n\r\n1. xml 파일을 이용한 설정\r\n2. java 파일을 이용한 설정\r\n\r\n\r\n\r\n이번에는 java 파일을 통해서 Spring 설정을 하는 법을 다뤄보고자 한다.\r\n\r\n## Java Config 생성\r\n\r\n### 1) Java Config 파일 생성\r\n\r\n1. `src/main/resources` 에 있는 **applicationContext.xml** 파일을 대체하기 위해, `src/main/java` 디렉토리에 **ems.member.configuration** 패키지의 **MemberConfiguration.java** 파일 생성한다.\r\n\r\n\r\n\r\n2. **@Configuration**\r\n\r\n- 스프링 설정 파일로서 <u>스프링 컨테이너를 생성하게 만드는 어노테이션</u>\r\n\r\n- 이 어노테이션이 붙은 Class는 Config 파일이 되어 xml 파일과 같은 기능을 한다\r\n\r\n```java\r\n@Configuration\r\npublic class MemberConfig {}\r\n```\r\n\r\n\r\n\r\n3. **@Bean**\r\n\r\n- <u>Bean 객체를 만드는 어노테이션</u> (<bean> 태그와 같은 역할)\r\n- **return 할 때 새로운 객체를 new를 이용해서 반환한다**\r\n- <u>클래스는 xml의 class</u>와 동일, <u>클래스 명은 xml의 id</u>와 동일하다\r\n\r\n```java\r\n/*\r\n<bean id=\"studentDao\" class=\"ems.memberm.service.StudentDao\"></bean>\r\n*/\r\n@Bean\r\npublic StudentDao studentDao() {\r\n\treturn new StudentDao();\r\n}\r\n```\r\n\r\n\r\n\r\n4. **의존성 부여**\r\n\r\n- 생성자 파라미터에 <u>의존하는 객체의 생성자를 넣음</u>으로써 **의존성을 부여한다**\r\n\r\n```java\r\n/*\r\n<bean id=\"registerService\" class=\"ems.memberm.service.StudentRegisterService\">\r\n\t<constructor-arg ref=\"StudentDao\"></constructor-arg>\r\n</bean>\r\n*/\r\n@Bean\r\npublic StudentRegisterService registerService() {\r\n    return new StudentRegisterService(studentDao());\r\n}\r\n```\r\n\r\n\r\n\r\n5. **property 부여**\r\n\r\nproperty가 부여된 bean 객체를 만드는 방법은 다음과 같다.\r\n\r\n- 먼저 <u>객체를 생성</u>한다.\r\n- <u>setter를 이용</u>해서 각 value를 부여한다\r\n- propery가 부여된 객체를 반환한다.\r\n\r\n```java\r\n/*\r\n<bean id=\"dataBaseConnectionInfoDev\" class=\"ems.memberm.service.DataBaseConnectionInfo\">\r\n\t<property name=\"JdbcUrl\" value=\"jdbc:oracle:thin:@localhost:1521:xe\"></property>\r\n\t<property name=\"UserId\" value=\"scott\"></property>\r\n\t<property name=\"UserPw\" value=\"tiger\"></property>\r\n</bean>\r\n*/\r\n@Bean\r\npublic DataBaseConnectionInfo dataBaseConnectionInfoDev() {\r\n    DataBaseConnectionInfo infoDev = new DataBaseConnectionInfo();\r\n    \r\n    infoDev.setJdbcUrl(\"jdbc:oracle:thin:@localhost:1521:xe\");\r\n    infoDev.setUserId(\"scott\");\r\n    infoDev.setUserPw(\"tiger\");\r\n\r\n    return infoDev;\r\n}\r\n```\r\n\r\n만약 propery가 Array나 Map 형태라면 다음과 같은 방법을 사용하면 된다.\r\n\r\n- Array 형태의 value는 <u>ArrayList<String></u>을 만들어서 setter로 부여한다\r\n- Map 형태의 value는 HashMap을 이용해 <u>Map<String, String></u>을 만들어서 setter로 부여한다\r\n\r\n```java\r\n/*\r\n<bean id=\"informationService\" class=\"ems.memberm.service.EMSInformationService\">\r\n\t<property name=\"developeres\">\r\n\t\t<list>\r\n\t\t\t<value>One</value>\r\n\t\t\t<value>Two</value>\r\n\t\t\t<value>Three</value>\r\n\t\t</list>\r\n\t</property>\r\n\t<property name=\"administrators\">\r\n\t\t<map>\r\n\t\t\t<entry>\r\n\t\t\t\t<key>\r\n\t\t\t\t\t<value>Cheney</value>\r\n\t\t\t\t</key>\r\n                <value>cheney@springPjt.org</value>\r\n\t\t\t</entry>\r\n\t\t\t<entry>\r\n\t\t\t\t<key>\r\n\t\t\t\t\t<value>Jasper</value>\r\n\t\t\t\t</key>\r\n                <value>jasper@springPjt.org</value>\r\n\t\t\t</entry>\r\n\t\t</map>\r\n\t</property>\r\n\t<property name=\"dbInfos\">\r\n\t\t<map>\r\n\t\t\t<entry>\r\n\t\t\t\t<key>\r\n\t\t\t\t\t<value>dev</value>\r\n\t\t\t\t</key>\r\n                <ref bean=\"dataBaseConnectionInfoDev\"/>\r\n\t\t\t</entry>\r\n\t\t\t<entry>\r\n\t\t\t\t<key>\r\n\t\t\t\t\t<value>real</value>\r\n\t\t\t\t</key>\r\n                <ref bean=\"dataBaseConnectionInfoReal\"/>\r\n\t\t\t</entry>\r\n\t\t</map>\r\n\t</property>\r\n</bean>\r\n*/\r\n@Bean\r\npublic EMSInformationService informationService() {\r\n    EMSInformationService info = new EMSInformationService();\r\n    \r\n    ArrayList<String> developers = new ArrayList<String>();\r\n    developers.add(\"One\");\r\n    developers.add(\"Two\");\r\n    developers.add(\"Three\");\r\n    info.setDevelopers(developers);\r\n\t\t\r\n    Map<String, String> administrators = new HashMap<String, String>();\r\n    administrators.put(\"Cheney\", \"cheney@springPjt.org\");\r\n    administrators.put(\"Jasper\", \"jasper@springPjt.org\");\r\n    info.setAdministrators(administrators);\r\n\t\t\r\n    Map<String, DataBaseConnectionInfo> dbInfos = new HashMap<String, DataBaseConnectionInfo>();\r\n    dbInfos.put(\"dev\", dataBaseConnectionInfoDev());\r\n    dbInfos.put(\"real\", dataBaseConnectionInfoReal());\r\n    info.setDbInfos(dbInfos);\r\n\r\n    return info;\r\n}\r\n```\r\n\r\n\r\n\r\n#### 전체 Java Config 파일 코드\r\n\r\n전체 코드는 다음과 같다.\r\n\r\n```java\r\n@Configuration\r\npublic class MemberConfig {\r\n    @Bean\r\n    public StudentDao studentDao() {\r\n        return new StudentDao();\r\n    }\r\n\r\n    @Bean\r\n    public StudentRegisterService registerService() {\r\n        return new StudentRegisterService(studentDao());\r\n    }\r\n    \r\n    @Bean\r\n    public DataBaseConnectionInfo dataBaseConnectionInfoDev() {\r\n        DataBaseConnectionInfo infoDev = new DataBaseConnectionInfo();\r\n        infoDev.setJdbcUrl(\"jdbc:oracle:thin:@localhost:1521:xe\");\r\n        infoDev.setUserId(\"scott\");\r\n        infoDev.setUserPw(\"tiger\");\r\n\r\n        return infoDev;\r\n    }\r\n    \r\n    @Bean\r\n    public EMSInformationService informationService() {\r\n        EMSInformationService info = new EMSInformationService();\r\n\r\n        ArrayList<String> developers = new ArrayList<String>();\r\n        developers.add(\"One\");\r\n        developers.add(\"Two\");\r\n        developers.add(\"Three\");\r\n        info.setDevelopers(developers);\r\n\r\n        Map<String, String> administrators = new HashMap<String, String>();\r\n        administrators.put(\"Cheney\", \"cheney@springPjt.org\");\r\n        administrators.put(\"Jasper\", \"jasper@springPjt.org\");\r\n        info.setAdministrators(administrators);\r\n\r\n        Map<String, DataBaseConnectionInfo> dbInfos = new HashMap<String, DataBaseConnectionInfo>();\r\n        dbInfos.put(\"dev\", dataBaseConnectionInfoDev());\r\n        dbInfos.put(\"real\", dataBaseConnectionInfoReal());\r\n        info.setDbInfos(dbInfos);\r\n\r\n        return info;\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### 2) Java Config 파일 적용\r\n\r\nXML 파일을 스프링 프로젝트의 설정으로 적용하기 위해서 우리는 `GenericXmlApplicationContext` 클래스를 사용했었다.\r\n\r\n마찬가지로 Java Config 파일의 설정을 스프링 프로젝트에 적용하기 위한 클래스도 있는데, \r\n\r\n`AnnotationConfigApplicationContext` 클래스를 사용하면 지금까지 만든 Java Config 파일을 적용할 수 있다.\r\n\r\n```java\r\n// GenericXmlApplicationContext ctx = new GenericXmlApplicationContext(\"classpath:applicationContext.xml\");\r\nAnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MemberConfig.class);\r\n```\r\n\r\n(`GenericXmlApplicationContext`이 아닌 `AnnotationConfigApplicationContext` 사용)\r\n\r\n\r\n\r\n## Java Config 분리\r\n\r\n\"개발 자체\"와 \"유지 보수\"의 용이성을 위해 **기능별로** java 설정 파일을 분리해서 만드는 것도 가능하다.\r\n\r\n### 1) 기능별로 분리된 Java Config 파일 생성\r\n\r\n일반적으로 **DAO, Service, DB, Utilities** 처럼 기능별로 분리한다.\r\n\r\n<u>이 때, 참조하는 함수(bean 객체 생성함수)가 다른 java 설정 파일에 있다면 @Autowired를 사용해서 다른 java 파일에서 생성된 Bean 객체를 가져온다.</u>\r\n\r\n- 기존 파일\r\n\r\n```java\r\n// ***** 기존 파일\r\n@Bean\r\npublic DataBaseConnectionInfo dataBaseConnectionInfoDev() {\r\n    DataBaseConnectionInfo infoDev = new DataBaseConnectionInfo();\r\n    infoDev.setJdbcUrl(\"jdbc:oracle:thin:@localhost:1521:xe\");\r\n    infoDev.setUserId(\"scott\");\r\n    infoDev.setUserPw(\"tiger\");\r\n    \r\n    return infoDev;\r\n}\r\n\r\n@Bean\r\npublic DataBaseConnectionInfo dataBaseConnectionInfoReal() {\r\n    DataBaseConnectionInfo infoReal = new DataBaseConnectionInfo();\r\n    infoReal.setJdbcUrl(\"jdbc:oracle:thin:@192.168.0.1:1521:xe\");\r\n    infoReal.setUserId(\"masterid\");\r\n    infoReal.setUserPw(\"masterpw\");\r\n    \r\n    return infoReal;\r\n}\r\n\r\n@Bean\r\npublic EMSInformationService informationService() {\r\n    EMSInformationService info = new EMSInformationService();\r\n    \r\n    Map<String, DataBaseConnectionInfo> dbInfos = new HashMap<String, DataBaseConnectionInfo>();\r\n    dbInfos.put(\"dev\", dataBaseConnectionInfoDev()); // 여기선 함수형태로 불러옴\r\n    dbInfos.put(\"real\", dataBaseConnectionInfoReal()); // 여기선 함수형태로 불러옴\r\n    info.setDbInfos(dbInfos);\r\n    \r\n    return info;\r\n}\r\n```\r\n\r\n- 분리된 파일\r\n\r\n```java\r\n// ***** 분리된 파일\r\n// java 파일 1\r\n@Bean\r\npublic DataBaseConnectionInfo dataBaseConnectionInfoDev() {\r\n    DataBaseConnectionInfo infoDev = new DataBaseConnectionInfo();\r\n    infoDev.setJdbcUrl(\"jdbc:oracle:thin:@localhost:1521:xe\");\r\n    infoDev.setUserId(\"scott\");\r\n    infoDev.setUserPw(\"tiger\");\r\n    \r\n    return infoDev;\r\n}\r\n\r\n@Bean\r\npublic DataBaseConnectionInfo dataBaseConnectionInfoReal() {\r\n    DataBaseConnectionInfo infoReal = new DataBaseConnectionInfo();\r\n    infoReal.setJdbcUrl(\"jdbc:oracle:thin:@192.168.0.1:1521:xe\");\r\n    infoReal.setUserId(\"masterid\");\r\n    infoReal.setUserPw(\"masterpw\");\r\n    \r\n    return infoReal;\r\n}\r\n\r\n// java 파일 2\r\n@Autowired\r\nDataBaseConnectionInfo dataBaseConnectionInfoDev;\r\n\r\n@Autowired\r\nDataBaseConnectionInfo dataBaseConnectionInfoReal;\r\n\r\n@Bean\r\npublic EMSInformationService informationService() {\r\n    EMSInformationService info = new EMSInformationService();\r\n    \r\n    Map<String, DataBaseConnectionInfo> dbInfos = new HashMap<String, DataBaseConnectionInfo>();\r\n    dbInfos.put(\"dev\", dataBaseConnectionInfoDev); // 여기선 Autowired로 가져온 bean 객체를 불러옴\r\n    dbInfos.put(\"real\", dataBaseConnectionInfoReal); // 여기선 Autowired로 가져온 bean 객체를 불러옴\r\n    info.setDbInfos(dbInfos);\r\n    \r\n    return info;\r\n}\r\n```\r\n\r\n\r\n\r\n### 2) 여러 개의 Java Config 파일 적용\r\n\r\n여러 개의 Java 설정 파일을 불러오는 방법은 쉽다.\r\n\r\n여러 클래스를 나열해서 불러오면 된다.\r\n\r\n```java\r\n// AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MemberConfig.class);\r\nAnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(\r\n    MemberDaoConfig.class, MemberServiceConfig.class, MemberDBConfig.class, MemberUtilConfig.class\r\n);\r\n```\r\n\r\n\r\n\r\n#### `@Import`\r\n\r\nImport 어노테이션을 이용하면 Java Config 파일 적용할 때 여러 개를 나열할 필요가 없다.\r\n\r\n[방법]\r\n\r\n**@Import({java 클래스 파일1, java 클래스 파일2, ...})**\r\n\r\n```java\r\n@Configuration\r\n@Import({MemberDaoConfig.class, MemberServiceConfig.class, MemberDBConfig.class, MemberUtilConfig.class})\r\npublic class MemberMainConfig {\r\n    ...\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## 출처\r\n\r\n인프런 - 자바 스프링 프레임워크(renew ver.) - 신입 프로그래머를 위한 강좌","documentTitle":"[Spring] Spring 설정 - Java Config","articleCategory":"Web","articleId":"5"},"__N_SSG":true}