{"pageProps":{"markdown":"# 그리디 유형\r\n\r\n> 매 순간 최선의 값을 구하는 방식\r\n\r\n직관적으로 문제를 해결해야 함 (최적 부분 구조; 부분 문제의 최적 값이 전체 문제의 최적 값과 일치하는 경우 사용 가능)\r\n\r\n공식이 없는 경우가 많음 (문제 유형이 다양함)\r\n\r\n여기선 그리디 유형 중 알아두면 문제 해결에 도움이 될만한 것을 소개\r\n\r\n\r\n\r\n참고로 그래프/트리 유형의 문제가 그리디로 많이 소개됨 (하지만 이런 유형은 그래프/트리에서 다룰 예정)\r\n\r\nex)\r\n\r\n- `Prim` : **최소 신장 트리 탐색** - 서브 트리를 확장하면서 탐색\r\n- `Kruskal` : **최소 신장 트리 탐색** - Cycle이 없는 서브 그래프를 확장하면서 탐색\r\n- `Dijkstra` : **최단 경로 탐색** - 가장 가까운 인접 정점을 찾는 방식\r\n- `Huffman tree & code` : **압축** - 빈도가 낮은 문자부터 이진 트리를 만들어 코드값 부여\r\n\r\n\r\n\r\n## 활동 선택 문제 (Activity-Selection problem)\r\n\r\n> ex) 회의실 문제\r\n\r\n- <u>시작 시간</u>과 <u>종료 시간</u>이 있는 n개의 활동들의 집합에서, **겹치지 않는** 최대 갯수를 구하는 문제\r\n  - 시작/종료 시간에만 값이 변하므로 이 시점을 기준으로 계산\r\n\r\n```\r\n1. 종료 시간 순으로 정렬\r\n\r\n2. 종료 시간이 가장 빠른 활동을 선택\r\n\r\n3. 이후 선택한 활동 이후에 종료 시간이 가장 빠른 활동을 선택을 반복\r\n```\r\n\r\n\r\n\r\n```python\r\n# https://www.acmicpc.net/problem/1931\r\n\r\nN = int(input())\r\nmeetings = sorted([list(map(int,input().split())) for _ in range(N)], key= lambda x:(x[1],x[0]))\r\n\r\nans = 0\r\nend = 0\r\n\r\nfor s, e in meetings:\r\n    if s >= end:\r\n        ans += 1\r\n        end = e\r\n\r\nprint(ans)\r\n```\r\n\r\n\r\n\r\n### 2018 KAKAO BLIND RECRUITMENT - 추석 트래픽\r\n\r\n- <u>활동 선택 문제와는 반대</u>로 **겹치는** 최대 갯수를 구하는 문제\r\n\r\n- 시작 시간과 종료 시간에만 값이 변한다는 것을 기준으로 연산 (여기선 1초 간의 트래픽이기 때문에 offset을 1초 둠)\r\n- **종료 시간 기준** 비교\r\n\r\n[방법1]\r\n\r\n1. 시작 시간 & 종료 시간 비교\r\n\r\n2. 겹치면 트래픽 +1 & 시작 시간 변경\r\n\r\n3. 안 겹치면 트래픽 -1 & 종료 시간 변경\r\n\r\n```python\r\ncurTraffic = 0\r\nmaxTraffic = 0\r\nindexE = 0\r\nindexS = 0\r\nwhile((indexE < totalLines) & (indexS < totalLines)):\r\n    if(S[indexS] < E[indexE]): # 겹침 => 시작 시간을 증가\r\n        curTraffic += 1\r\n        maxTraffic = max(maxTraffic, curTraffic)\r\n        indexS += 1\r\n    else: # 더 이상 겹치지 않음 => 종료 시간 변경\r\n        curTraffic -= 1\r\n        indexE += 1\r\n```\r\n\r\n[방법2]\r\n\r\n1. 종료 시간을 기준으로 시작 시간 비교 => 변경\r\n2. 최대값 찾아내기\r\n\r\n```python\r\nanswer = 0\r\nstart_time_list, end_time_list = preprocess(lines)\r\n\r\nfor i in range(len(lines)):\r\n    end_time = end_time_list[i]\r\n    temp_answer = 0\r\n    for j in range(i, len(lines)):\r\n        temp_start_time = start_time_list[j]\r\n        if end_time > temp_start_time:\r\n            temp_answer += 1\r\n    answer = max(answer,temp_answer)\r\n```\r\n\r\n","documentTitle":"그리디 유형","index":[{"type":"type1","data":" 그리디 유형"},{"type":"type2","data":" 활동 선택 문제 (Activity-Selection problem)"},{"type":"type3","data":" 2018 KAKAO BLIND RECRUITMENT - 추석 트래픽"}]},"__N_SSG":true}