{"pageProps":{"markdown":"# Dynamic Programming 유형\r\n\r\n> 동적 계획법\r\n\r\n[문제를 풀 때 생각할 것]\r\n\r\n- 계산된 값을 `저장` -> 활용 (Memoization)\r\n- Memoization을 위한 `배열`이 필요\r\n\r\n\r\n\r\n## 유형1\r\n\r\n- Check or Pass\r\n  - **선택을 하는 경우 & 하지 않는 경우를 나누어서 생각**\r\n  - Memoization용 배열에 최종 결과값을 위한 인덱스 필요\r\n\r\n```python\r\n# https://www.acmicpc.net/problem/14501\r\n\r\nN = int(input())\r\nTimes = [0] * N\r\nPayments = [0] * N\r\nExpectations = [0] * (N+1)\r\n\r\nfor i in range(N):\r\n    t, p = map(int, input().split())\r\n    Times[i] = t\r\n    Payments[i] = p\r\n    \r\n    for i in range(N-1, -1, -1):\r\n        if i + Times[i] > N:\r\n            Expectations[i] = Expectations[i+1]\r\n        else:\r\n            Expectations[i] = max(Expectations[i+1], Payments[i] + Expectations[i+Times[i]])\r\n\r\nprint(Expectations[0])\r\n```\r\n\r\n","documentTitle":"Dynamic Programming 유형","index":[{"type":"type1","data":" Dynamic Programming 유형"},{"type":"type2","data":" 유형1"}]},"__N_SSG":true}