{"pageProps":{"markdown_gitHub":"# [숙박 서비스] 개발 기록\r\n\r\n숙박 서비스를 개발하고 운영 중이다.\r\n\r\n고민도 많이 하고 시행착오도 겪으며 배운 점이 많은 시간이었다.\r\n\r\n개발 외적으로도 \"결국 하면 된다\"는 깨달음을 얻은 시기이기도 했다.\r\n\r\n개인적으로 경험하고 느낀 것들을 이 글에서 정리하고자 한다.\r\n\r\n\r\n\r\n## [1] 동시성 관리\r\n\r\n동시에 같은 예약이 생기면 안 된다. 당연한 이야기다.\r\n\r\n이 부분이 숙박 예약의 가장 핵심적인 부분이라고 생각해서 동시 예약을 막는 작업부터 했다.\r\n\r\nJPA 영속성 관리는 요청 당 하나의 스레드가 배정되므로 스레드 별로 적용되는 1차 캐시 대신 글로벌하게 적용되는 2차 캐시를 사용했고 예약을 할 때 테이블에 낙관적 락을 걸었다.\r\n\r\n초반에는 이 부분이 가장 중요했지만 이후 플랫폼 간 예약 정보를 연동하게 되면서 이 서비스 내에서 동시성 관리를 하는 게 크게 의미가 없어졌다. (이 웹사이트를 통해 동시에 2명이 예약할 확률보다 에어비앤비, 부킹닷컴, 웹사이트 이렇게 다른 곳의 예약과 겹칠 확률이 비교할 수 없이 크다)\r\n\r\n\r\n\r\n## [2] 포트원 결제 모듈 (구 아임포트)\r\n\r\n어떤 면에서 가장 시행착오를 많이 거친 부분이다.\r\n\r\n정산이 빠르고 UI 가 깔끔해서 PG사는 토스페이먼츠를 사용했고 포트원을을 통해 연결했다.\r\n\r\n문제는 포트원의 결제 프로세스에 대한 이해도가 부족해서 오해로 인한 삽질이 조금 있었다. (merchant id가 상품의 고유 번호라고 생각했는데 결제의 고유 번호였다)\r\n\r\n결제 과정이 곧 예약 과정이기 때문에 많은 검증 로직을 넣었다.\r\n\r\n예약 정보를 생성할 때, 결제정보를 입력하고 PG사에 결제 정보를 전달하기 전에, 결제 완료 후 Webhook을 받았을 때, Client가 준 결제 정보와 Webhook 정보를 일치할 때 매번 예약 가능 여부와 결제의 정상 여부를 검증했다.\r\n\r\n\r\n\r\n## [3] 본인인증\r\n\r\n처음에는 이 부분은 굳이 넣어야할까 하는 생각이 들었다.\r\n\r\n그러다 FE 와 회의를 하며 미성년자가 오거나 연락처를 잘못 남겨 예약 정보를 제대로 받지 못할 경우를 대비해 본인인증이 필요하다는 결론을 내렸다.\r\n\r\n다만 다날 휴대폰본인인증 서비스는 비용이 들어 미성년자 여부는 현장에서 처리하고 전화번호만 추가하기로 했다.\r\n\r\nNaver Cloud의 S.E.N.S. 서비스가 가장 저렴하게 문자를 보낼 수 있어 네이버를 선택했고 6자리 난수 생성을 해서 Redis에 Key는 전화번호, Value는 난수, Expire 시간은 3분으로 설정한 뒤 Client가 보낸 휴대폰번호와 난수 값을 Redis에 있는 데이터와 비교하는 방식으로 구현했다.\r\n\r\n\r\n\r\n## [4] 서버 호스팅\r\n\r\n운영 비용을 최소화하는 것이 목적이었기 때문에 DB는 RDS를 사용하지 않고 EC2에 설치해서 관리했다.\r\n\r\nHTTPS 통신을 위해 Certificate Manager에서 SSL 인증서를 받고 백은 ELB에 인증서를 세팅하고 프론트는 CloudFront에 인증서를 세팅했다.\r\n\r\n결과적으로 EC2, ELB, S3, Route53, CloudFront, Certificate Manager를 사용했다.\r\n\r\n\r\n\r\n## [5] 예약 정보 연동\r\n\r\n에어비앤비와 부킹닷컴을 통해서도 예약을 받고 있기 때문에 타 플랫폼과 예약 정보를 연동해야했다.\r\n\r\n여러 플랫폼을 확인해보니 ICS 포맷을 통해 캘린더 형태로 예약 정보를 주고 받는다는 것을 알게 됐다. ical4j 라이브러리를 이용해 파싱을 했고 파싱한 데이터를 분류하는 건 직접 여러 번 테스트를 하며 알아냈다.\r\n\r\nics 포맷을 통해 예약 정보를 연동하는 기능을 개발한 이후에는 테스트 계정을 만들어 에어비앤비에서 여러 상황에 따른 연동 여부를 테스트한 뒤 정식으로 기능을 오픈했다.\r\n\r\n다만 문제가 있었는데, 에어비앤비에서 1~2시간 마다 예약 정보를 가져가는데 그 1~2시간 사이에는 오버부킹의 위험성이 존재한다는 것이었다.\r\n\r\nAPI를 통해 직접 예약 정보를 주고 받고 싶었지만 이 부분은 에어비앤비에 직접 문의를 해 보니 불가능하다는 답변을 받았다. (다른 숙박 플랫폼도 마찬가지였다. API 연결을 위해선 별도의 계약을 맺는다고 한다.)\r\n\r\n오버부킹을 막기 위해 동시성 관리를 했는데 훨씬 더 큰 위험이 외부에 존재했다. 현재까지 확인한 바로는 이 문제는 달력 연동을 하는 대부분의 다른 숙박 플랫폼들도 비슷한 리스크를 가지고 있는 것 같다.\r\n\r\n\r\n\r\n## [6] 관리자 페이지\r\n\r\n가격 수정, 예약 변경 등 예약 시스템 관리를 위한 관리자 페이지를 만들었다.\r\n\r\n### [6-1] 예약 통합 관리\r\n\r\n세 가지 플랫폼에서 예약을 받고 있어서 예약 관리가 매우 불편했다. 또 전화를 통해 예약한 경우에는 정보를 기록할 곳이 종이 밖에 없는 상태였다.\r\n\r\n모든 예약 정보를 관리자 페이지에서 관리하기로 결정했고 기존 예약 시스템에 영향을 주지 않는 새로운 도메인을 추가해서 관리하기로 결정했다.\r\n\r\n새로운 도메인을 사용 이유는 다음과 같다.\r\n\r\n1. 전화를 통한 월요일 예약으로 월요일 예약을 막고 며칠 뒤 전화를 통해 화요일도 예약이 들어오면 타 숙박 플랫폼에선 [월요일 예약 불가]인 달력 이벤트를 지우고 [월~화 예약 불가]라는 새로운 달력 이벤트를 생성해서 보낸다.\r\n\r\n2. 이렇게 자주 이벤트가 바뀌다보면 데이터가 날아갈 수도 있고 사이드 이펙트로 잘 돌아가던 기존 예약 시스템에 영향을 줄지도 모른다.\r\n\r\n그래서 그냥 안전하게 기존 예약 정보를 바탕으로 예약 변경 사항에 대해서만 변화가 생기는 예약 관리 도메인을 만들었다.\r\n\r\n연동을 통해 받은 달력 이벤트는 개인정보가 존재하지 않기 때문에 메모하듯이 수정할 수 있게 만들었다.\r\n\r\n그리고 관리자의 편의를 위해 체크인 전날 알아둬야할 내용을 관리자에게 문자로 알림을 주거나 고객에게 필요한 메시지를 바로 보낼 수 있는 기능을 추가했다.\r\n\r\n\r\n\r\n## [7] 운영 중 생긴 여러 문제들\r\n\r\n노트북을 끼고 살아야 했다. 지하철이나 버스에서 핫스팟을 켜고 대응을 할 때도 여러 번 있었고 친구와 약속 중간에 집으로 가야하는 일도 있었다.\r\n\r\n문자가 계속 보내지거나, 안 보내지거나... 초반에 연동이 불안할 때는 예약이 취소되는 일도 있었다.\r\n\r\n다행히 현재는 시스템이 안정화된 상태이다.\r\n\r\n### [7-1] 새로운 플랫폼 추가\r\n\r\n사실 부킹닷컴은 7월에 추가된 플랫폼이다. 그런데 부킹닷컴을 추가하며 깨닳은 문제점이 있다.\r\n\r\nGuest라는 클래스 아래에 GuestHome, GuestAirbnb를 상속받아 만들어서 관리를 했는데 이러면 부킹닷컴을 추가할 때 GuestBooking을 또 만들어야 하는 문제가 생겼다.\r\n\r\nGuestExternal이나 Others라는 이름으로 클래스를 만들고 플랫폼에 따라 이름 정도만 분기하는 게 더 효율적이라는 생각이 들었다.\r\n\r\n다만 수정을 하진 않았는데, 앞으로 새로운 플랫폼이 또 추가될 가능성이 희박해서다.\r\n\r\n플랫폼이 늘어날 수록 각 플랫폼의 고객이 적어져 리뷰 관리, 점수 관리, 검색 순위 등에서 악영향을 끼치기 때문이다.\r\n\r\n\r\n\r\n### [8] 마무리\r\n\r\n배운 게 참 많은 시간이었다.\r\n\r\n개발이 완료되고 운영을 하면서도 여러 사건들이 많았고 동시에 소속된 NodeCrew에서 새로운 프로젝트를 진행하게 되어 블로그에 소홀했는데, 앞으로 이전처럼 자주는 글을 쓰지 못하더라도 가끔씩 이렇게 정리하는 내용을 남길 예정이다.\r\n","documentTitle":"[숙박 서비스] 개발 기록","articleCategory":"Develop","articleId":"18"},"__N_SSG":true}