{"pageProps":{"markdown":"# JPA 영속성 컨텍스트\r\n\r\nJPA를 사용한 코드를 보면 Entity를 수정/삭제할 때 DB에 쿼리를 보내는 부분(JpaRepository를 사용하는 코드)이 없는 것을 볼 수 있습니다.\r\n\r\n이는 JPA의 `영속성 컨텍스트`라는 특징 때문이며 JPA의 핵심 개념이기도 합니다.\r\n\r\n---\r\n\r\n## 개념\r\n\r\n**Entity를 영구 저장하는 환경** 을 뜻합니다.\r\n\r\nEntityManager가 Entity를 관리할 때, Entity를 이 영속성 컨텍스트라는 환경에 넣고 관리하며 **Entity에 변경이 일어나면 트랜잭션이 끝나는 시점에 DB에 변경분을 반영**합니다.\r\n\r\n즉 EntityManager를 통해서 DB의 Table 정보와 Entity 정보를 일치시키는 작업 환경을 말합니다.\r\n\r\n\r\n\r\n## 동작과정\r\n\r\n1. Transaction 발생\r\n\r\n2. EntityManager 생성 (요청(Thread) 당 하나씩)\r\n   \r\n   - EntityManager는 DB Connection Pool을 사용해 DB와 연결\r\n\r\n3. Entity를 역속성 컨텍스트에 등록 (영속)\r\n   \r\n   - 1차 캐시 : 캐시를 사용해서 조회, 수정,삭제\r\n   \r\n   - 쓰기 지연 : 변경 발생 시 바로 DB에 업데이트를 하지 않고 Transaction Commit이 되면 한 번에 DB에 쿼리 요청\r\n   \r\n   - 동일성 보장 : 1차 캐시에 저장된 엔티티의 동일성 보장 (여러 번 엔티티를 읽어도 캐싱 되어있는 동일한 엔티티를 반환)\r\n   \r\n   - **변경감지(Dirty Checking)** : 변경 사항을 자동으로 확인 후 DB에 반영 (이것 때문에 Entity 수정/삭제 쿼리가 없어도 됨)\r\n\r\n\r\n\r\n## 생명주기\r\n\r\n1. 비영속\r\n\r\n엔티티 객체 생성\r\n\r\n영속성 컨텍스트에 저장 X\r\n\r\n\r\n\r\n2. 영속\r\n\r\n엔티티 객체 생성\r\n\r\n영속성 컨텍스트에 저장 O\r\n\r\n\r\n\r\n3. 준영속\r\n\r\n엔티티 객체 생성\r\n\r\n영속성 컨텍스트에 저장\r\n\r\n영속성 컨텍스트에서 제거 (더이상 관리 X)\r\n\r\n\r\n\r\n4. 삭제\r\n\r\n엔티티 객체 생성\r\n\r\n영속성 컨텍스트에 저장\r\n\r\n엔티티를 영속성 컨텍스트와 데이터베이스에서 삭제","documentTitle":"JPA 영속성 컨텍스트","index":[{"type":"type1","data":" JPA 영속성 컨텍스트"},{"type":"type2","data":" 개념"},{"type":"type2","data":" 동작과정"},{"type":"type2","data":" 생명주기"}]},"__N_SSG":true}