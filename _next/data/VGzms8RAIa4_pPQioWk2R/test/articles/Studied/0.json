{"pageProps":{"markdown_gitHub":"# [CleanCode] 네이밍\r\n\r\n```\r\n출처 : Clean Code - Robert C. Martin\r\n```\r\n\r\n클린 코드는 결국 읽기 쉬운 코드를 의미합니다.\r\n\r\n읽기 쉬운 코드를 만들기 위한 네이밍 방법으로 다음과 같습니다.\r\n\r\n## 의도 밝히기\r\n\r\n> 의도, 기능, 사용법이 잘 드러나는 이름\r\nasasa\r\n\r\n이름을 지을 때는 해당 변수, 함수, 클래스, 패키지의 <u>의도가 무엇인지 쉽고 분명하게 알 수 있는 이름</u>으로 지어야 합니다.\r\n\r\n즉\r\n\r\n```java\r\nint i;\r\nclass edit() {...}\r\n```\r\n\r\n이 아니라\r\n\r\n```java\r\nint articleId;\r\nclass editArticle() {...}\r\n```\r\n\r\n처럼 어떤 목적으로 사용되는지 알 수 있는 이름을 붙여야 합니다.\r\n\r\n\r\n\r\n코드의 의도를 밝히는 것은 이름에만 국한되지 않습니다.\r\n\r\nint, ArrayList와 같은 자료형보다 의미가 명확한 커스텀 클래스를 만들어 사용하거나\r\n\r\n아래와 같이 \r\n\r\n```java\r\nif (cell[STATUS_VALUE] == FLAGGED) {...}\r\n```\r\n\r\n대신\r\n\r\n```java\r\nif (cell.isFlagged()) {...}\r\n```\r\n\r\n와 같이 의미를 굳이 유추할 필요 없이 글처럼 읽을 수 있는 형태의 코드를 짜는 것도 의도를 밝히는 행위에 포함됩니다.\r\n\r\n\r\n\r\n## 오해 피하기\r\n\r\n> 오해할 수 있는 이름 피하기\r\n\r\n읽는 사람이 오해할 수 있는 상황을 최대한 피하도록 이름을 지어야 합니다.\r\n\r\n프로그래머에게 특별한 의미를 지닌 List가 들어간 [accountList] 대신 [accountGroup]을 사용하고\r\n\r\n중의적인 의미, 비슷한 이름은 피하는 것이 좋습니다.\r\n\r\n\r\n\r\n## 쉬운 이름 사용하기\r\n\r\n> 발음하기 쉬운 이름 & 검색하기 쉬운 이름\r\n\r\n협업을 할 때 발음하기 어려운 이름은 불필요하게 소통을 방해합니다.\r\n\r\n또한 검색하기 쉬운 이름을 사용해야 합니다.\r\n\r\n여러 곳에서 사용하는 상수는 이름을 붙입니다.\r\n\r\n\r\n\r\nHTTP 코드 [200]을 그냥 사용하는 것보다 [HTTP_OK]라는 이름을 붙여서 사용하는 것이 검색을 더 편리하게 만듭니다.\r\n\r\n\r\n\r\n## 불필요한 정보를 넣지 않기\r\n\r\n> 헝가리안 표기법 피하기\r\n\r\n최신 IDE에서는 해당 변수와 함수의 종류를 쉽게 파악할 수 있기 때문에 헝가리안 표기법(데이터타입을 이름에 넣는 것)은 더이상 필요하지 않습니다.\r\n\r\n\r\n\r\n## 클래스는 명사, 메서드는 동사\r\n\r\n> 글처럼 읽을 수 있는 구조 만들기\r\n\r\n클래스에는 명사나 명사구를 사용하고 메서드에는 동사나 동사구를 사용하여 명명합니다.\r\n\r\n메서드의 경우 접근자에는 get, 변경자에는 set, 조건자에는 is로 시작하는 이름을 짓습니다.\r\n\r\n\r\n\r\n이런 구조는 [class.method]를 [명사.동사] 처럼 보이게 만들어 코드를 읽기 쉽게 만들어 줍니다. \r\n\r\n\r\n\r\n## 통일된 표현\r\n\r\n> 같은 기능, 같은 표현\r\n\r\n동일한 개념은 동일한 단어를 사용하여 표현해야 합니다.\r\n\r\n[getUsername]을 사용했다면 [fetchUserId]가 아니라 [getUserId]를 사용해야 하고\r\n\r\n한 곳에서 작성된 글을 [article]로 명명했다면 다른 곳에서 [post]란 이름을 사용하면 안 됩니다.\r\n\r\n\r\n\r\n하지만 사용하는 개념이 조금이라도 다르다면 이름을 구분해야 합니다.\r\n\r\nint 형태의 두 점수를 합산하기 위해 [addScore]을 사용했다면, arrayList 형태의 플레이어 목록에 사람을 추가할 때 [addPlayerList]라는 이름을 사용하면 안 됩니다.\r\n\r\n두 add는 다른 맥락을 가졌기 때문입니다.\r\n\r\n\r\n\r\n## 익숙한 이름\r\n\r\n> 1. 프로그래밍 용어\r\n> 2. 도메인 용어\r\n\r\n프로그래머라면 누구나 알 만한 Queue, Stack이나 Visitor 패턴의 AccountVisitor 같은 이름은 사용해도 좋습니다. 코드를 읽을 사람도 같은 프로그래머이기 때문입니다.\r\n\r\n만약 적절한 용어가 없다면 도메인 영역에서 이름을 가져와도 괜찮습니다. 혹 프로그래머가 해당 용어를 모르더라도 주변에 물어볼 동료가 있기 때문입니다.\r\n\r\n\r\n\r\n## 적절한 맥락\r\n\r\n> 맥락을 파악하는데 도움이 되는 이름짓기\r\n>\r\n> 불필요한 맥락 피하기\r\n\r\n맥락을 파악할 수 있는 이름을 붙입니다.\r\n\r\n```java\r\nif (count == 1)\r\n{\r\n    number = \"1\";\r\n    verb = \"is\";\r\n    noun_postfix = \"\";\r\n}\r\nelse\r\n{\r\n    number = Integer.toString(count);\r\n    verb = \"are\";\r\n    noun_postfix = \"s\";    \r\n}\r\n```\r\n\r\n보다는\r\n\r\n```java\r\nif (count == 1)\r\n{\r\n    thereIsOneLetter();\r\n}\r\nelse\r\n{\r\n    thereAreManyLetters();  \r\n}\r\n```\r\n\r\n가 훨씬 맥락을 파악하는 데 좋습니다.\r\n\r\n\r\n\r\n[PangPang]이라는 서비스를 개발하면서 모든 클래스의 이름 앞에 [PangPang_]을 붙이는 건 현명하지 못합니다.\r\n\r\n짧고 불명확한 의미의 이름보다는 길고 명확한 의미의 이름이 좋지만, 불필요한 단어를 넣어 해석을 방해하는 일은 없어야 합니다.\r\n\r\n[getUserId]로 충분한 이름을 [getUserIdFromUserTable]로 늘이지 않아야 합니다.\r\n\r\n","documentTitle":"[CleanCode] 네이밍","articleCategory":"Studied","articleId":"0"},"__N_SSG":true}