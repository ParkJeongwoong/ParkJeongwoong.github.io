{"pageProps":{"markdown":"# DFS & BFS 유형\r\n\r\n> 대표적인 그래프 문제\r\n\r\n[문제를 해결 순서]\r\n\r\n1. visited 리스트 생성\r\n\r\n2. 연결 상태 리스트 생성\r\n\r\n3. 시작 노드를 리스트에 담기\r\n\r\n4. 노드를 꺼내고 연결 노드를 담기\r\n\r\n- 이 때 노드를 어떻게 꺼내냐에 따라 DFS/BFS가 나뉨\r\n  1. DFS : Stack 사용\r\n  1. BFS : Queue 사용\r\n\r\n\r\n\r\n## DFS\r\n\r\n> Stack으로 꺼내기\r\n\r\n```python\r\n##### 입력 : 정점의 수(N) 간선의 수(M) 탐색의 시작 점점(V)\r\nimport sys\r\n\r\nN, M, V = map(int,sys.stdin.readline().split())\r\n\r\n##### (N x N) array 만들기\r\nNodes = []\r\nfor i in range(N):\r\n    Nodes.append([0]*N) # 이게 N = [Nodes]*N 이렇게 짜면 참조변수가 된다.\r\n\r\nvisited = [0] * N # 방문한 곳\r\n\r\n# Edge 연결\r\nfor i in range(M):\r\n    a, b = map(int,sys.stdin.readline().split())\r\n    Nodes[a-1][b-1] = 1\r\n    Nodes[b-1][a-1] = 1\r\n\r\n\r\n\r\n##### DFS\r\ndef DFS(Nodes,V,visited,bills):\r\n    visited[V] = 1\r\n    bills.append(V)\r\n    for i, edge in enumerate(Nodes[V]):\r\n        if edge and visited[i] == 0:\r\n            DFS(Nodes,i,visited,bills)\r\n            \r\n    return bills\r\n\r\n# DFS 출력\r\nbills = []\r\nDFS_result = DFS(Nodes,V-1,visited,bills)\r\nfor i in DFS_result:\r\n    print(i+1, end = ' ')\r\nprint()\r\n```\r\n\r\n\r\n\r\n## BFS\r\n\r\n> Queue로 꺼내기\r\n\r\n```python\r\n##### 입력 : 정점의 수(N) 간선의 수(M) 탐색의 시작 점점(V)\r\nimport sys\r\n\r\nN, M, V = map(int,sys.stdin.readline().split())\r\n\r\n##### (N x N) array 만들기\r\nNodes = []\r\nfor i in range(N):\r\n    Nodes.append([0]*N) # 이게 N = [Nodes]*N 이렇게 짜면 참조변수가 된다.\r\n\r\nvisited = [0] * N # 방문한 곳\r\n\r\n# Edge 연결\r\nfor i in range(M):\r\n    a, b = map(int,sys.stdin.readline().split())\r\n    Nodes[a-1][b-1] = 1\r\n    Nodes[b-1][a-1] = 1\r\n\r\n\r\n\r\n##### BFS\r\ndef BFS(Nodes,V,visited,bills,queue=[]):\r\n    bills.append(V)\r\n    visited[V] = 1\r\n    \r\n    for i, edge in enumerate(Nodes[V]):\r\n        if edge and visited[i] == 0 :\r\n            queue.append(i)\r\n            \r\n\t# queue를 재귀처럼 사용\r\n    while queue:\r\n        go = queue.pop(0)\r\n        if visited[go] == 0:\r\n            bills.append(go)\r\n        visited[go] = 1\r\n        for i, edge in enumerate(Nodes[go]):\r\n            if edge and visited[i] == 0 :\r\n                queue.append(i)\r\n                \r\n    return bills\r\n\r\n# BFS 출력\r\nbills = []\r\nvisited = [0] * N\r\n\r\nBFS_result = BFS(Nodes,V-1,visited,bills)\r\nfor i in BFS_result:\r\n    print(i+1,end = ' ')\r\n```\r\n\r\n\r\n\r\n","documentTitle":"DFS & BFS 유형","index":[{"type":"type1","data":" DFS & BFS 유형"},{"type":"type2","data":" DFS"},{"type":"type2","data":" BFS"}]},"__N_SSG":true}