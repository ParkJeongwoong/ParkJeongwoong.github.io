{"pageProps":{"markdown":"# [Spring] Bean이란?\r\n\r\n아직 Spring을 많이 써보지 않아서 Bean이라는 단어가 익숙하지 않다. 분명 이전에 Bean에 대한 글을 읽은 적이 있지만, 한 동안 Spring을 안 쓰다 보니 기억이 잘 나지 않는다.\r\n\r\n앞으로도 이런 일이 있을 수 있기 때문에, 기록을 하는 용도로 Bean에 대한 정리를 할까 한다.\r\n\r\n\r\n\r\n## Bean의 개념\r\n\r\n**Bean** : Spring에서 IoC 컨테이너가 관리하는 객체\r\n\r\n(IoC 컨테이너 : Inversion of Control, 즉 제어권이 역전되었다는 말. 따라서 <u>IoC 컨테이너는 객체의 생성, 생명 주기를 관리하는 기능을 제공한다.</u> )\r\n\r\n\r\n\r\n- Java의 new 연산자로 얻는 객체와는 다르다.\r\n  - `ApplicationContext.getBean()`으로 얻는 객체이다.\r\n- 왜 꼭 이걸 써야하는가?\r\n  - 무조건, 반드시 쓸 필요는 없다. new로 만든 Java의 기존 객체로도 Spring을 구동할 수 있다.\r\n  - 객체에 대한 내용을 XML 파일에서 관리해서 Java 코드와 분리시키기 때문에 관리가 편해진다.\r\n  - XML 파일이 가독성이 더 좋아 객체에 대한 파악이 쉽다. (이 부분은 개인차가 있다.)\r\n\r\n\r\n\r\n## Bean의 속성\r\n\r\n- **class (필수)** : 정규화된 Java Class 이름\r\n- id : 객체의 고유 식별자\r\n- scope : 객체의 범위\r\n\r\n- constructor-arg : 생성 시 생성자에 전달할 인수\r\n- property : 생성 시 bean setter에 전달할 인수\r\n- 기타 등등\r\n\r\n\r\n\r\n\r\n\r\n[글 작성 중 . . .]","documentTitle":"[Spring] Bean이란?"},"__N_SSG":true}