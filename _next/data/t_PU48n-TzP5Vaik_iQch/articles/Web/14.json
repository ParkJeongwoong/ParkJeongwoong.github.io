{"pageProps":{"markdown":"# [Spring] JDBC\r\n\r\n오늘은 Java에서는 데이터베이스에 접근하기 위해 사용하는 **JDBC**에 대해 알아보겠습니다.\r\n\r\n## JDBC (Java Database Connectivity)\r\n\r\nJDBC는 Java에서 데이터베이스에 접근하기 위해 사용한 **인터페이스**입니다.\r\n\r\nJava Application이 데이터베이스를 조작하기 위해서는 Application의 요청을 받아 데이터베이스에서 이를 수행할 API가 필요합니다.\r\n\r\n이 API의 역할을 하는 것이 드라이버인데 DBMS마다 데이터베이스를 다루는 방식이 다르기 때문에 드라이버는 DB 벤더사에서 만들어 제공합니다.\r\n\r\n그런데 각 벤더사마다 마음대로 메소드를 만들면 사용하기 매우 불편할 것입니다.\r\n\r\nJDBC가 여기서 등장하는데, Java에서는 이 문제를 해결하기 위해서 **JDBC Interface**를 사용했습니다.\r\n\r\nJDBC Interface는 java.sql 패키지를 의미하며 이 안에는 인터페이스로 구현된 데이터베이스 관련 객체들이 있습니다.\r\n\r\n벤더사는 이 JDBC Interface를 기반으로 JDBC 드라이버를 구현했고 이 덕분에 우리는 Java에서 정해놓은 메소드로 DB를 다룰 수 있습니다.\r\n\r\n\r\n\r\n오라클의 JDBC 드라이버 : **oracle.JDBC.driver.OracleDriver**\r\n\r\nMySQL의 JDBC 드라이버 : **org.git.mm.mysql.Driver**\r\n\r\n\r\n\r\n## Connection Flow\r\n\r\nJDBC를 통해 DB에 연결하는 방법은 다음과 같은 과정을 거칩니다.\r\n\r\n>  드라이버 로딩 - DB 연결 - **SQL 작성 및 전송** - 자원 해제\r\n\r\n\r\n\r\n1. 드라이버 로딩\r\n\r\n**Class.forName()** 을 이용해 <u>JDBC 드라이버를 메모리에 올립니다</u>.\r\n\r\n\r\n\r\n2. DB 연결\r\n\r\n**DriverManager.getConnection(포트번호를 포함한 드라이버 경로, 유저이름, 비밀번호)** 을 이용해 메모리에 올라간 드라이버 객체를 <u>데이터베이스와 연결</u>하고 연결 상태를 표현하는 **Connection** 객체를 만듭니다.\r\n\r\n\r\n\r\n3. SQL 작성 및 전송\r\n\r\nString으로 된 SQL문을 Connection 객체의 **prepareStatement()** 메소드로 입력하고 반환값을 **PreparedStatement 객체**에 담습니다.\r\n\r\n이 때 SQL문에서 변수는 '?'로 표시하고 '?'에 대응하는 값을 지정할 때는 SQL문을 담은 PreparedStatement 객체에서 **setString(인덱스, 값)**이나 **setInt(인덱스, 값)** 과 같은 메소드를 사용해 설정합니다.\r\n\r\nSQL문의 실행은 **execute()** - [T/F 반환; 모든 구문 수행], **executeQuery()** - [ResultSet 객체 반환; SELECT 구문 수행], **executeUpdate()** - [Int 반환; SELECT 구문을 제외한 구문 수행] 메소드를 이용합니다.\r\n\r\n\r\n\r\n4. 자원 해제\r\n\r\n**pstmt.close()** 와 **conn.close()** 을 통해 사용한 자원을 해제합니다.\r\n\r\n\r\n\r\n## 예시 - DAO 파일\r\n\r\n```java\r\n@Repository\r\npublic class MemberDao implements IMemberDao {\r\n\t\r\n    // Driver Loading 용도\r\n\tprivate String driver = \"oracle.jdbc.driver.OracleDriver\"; // Load 할 Driver\r\n\tprivate String url = \"jdbc:oracle:thin:@localhost:1521:xe\"; // Driver 경로 w. Port\r\n\tprivate String userid = \"scott\";\r\n\tprivate String userpw = \"tiger\";\r\n\t\r\n\tprivate Connection conn = null; // Java.SQL에 있는 Conncetion\r\n\tprivate PreparedStatement pstmt = null; // Java.SQL에 있는 PreparedStatement\r\n\tprivate ResultSet rs = null; // 결과값을 받기 위한 Java.SQL의 ResultSet\r\n\t\r\n\t...\r\n\r\n}\r\n```\r\n\r\nDAO 클래스 상단에 JDBC를 위해 필요한 변수를 선언합니다.\r\n\r\n\r\n\r\n- Insert Method\r\n\r\n```java\r\n@Repository\r\npublic class MemberDao implements IMemberDao {\r\n    ...\r\n\t\r\n    @Override\r\n    public int memberInsert(Member member) {\r\n\t\r\n        int result = 0;\r\n\t\r\n        try {\r\n            // 1) 드라이버 로딩\r\n            Class.forName(driver);\r\n            // 2) DB 연결\r\n            conn = DriverManager.getConnection(url, userid, userpw); // Java.SQL에 있는 DriverManager\r\n            // 3) SQL 작성 및 전송\r\n            String sql = \"INSERT INTO member (memId, memPw, memMail) values (?,?,?)\"; // 3-1) query문 작성\r\n            // 3-2) query문 전송\r\n            pstmt = conn.prepareStatement(sql);\r\n            pstmt.setString(1, member.getMemId());\r\n            pstmt.setString(2, member.getMemPw());\r\n            pstmt.setString(3, member.getMemMail());\r\n            result = pstmt.executeUpdate(); // 성공한 횟수가 result로 return됨 (1이 return 됨)\r\n        } catch (ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            try {\r\n                // 4) 자원 해제\r\n                if(pstmt != null) pstmt.close();\r\n                if(conn != null) conn.close();\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\t\r\n        return result;\r\n\t\r\n    }\r\n    \r\n    ...\r\n}\r\n```\r\n\r\n- Select Method\r\n\r\n```java\r\n@Repository\r\npublic class MemberDao implements IMemberDao {\r\n    ...\r\n        \r\n    @Override\r\n    public Member memberSelect(Member member) {\r\n\t\r\n        Member mem = null;\r\n\t\r\n        try {\r\n            // 1) 드라이버 로딩\r\n            Class.forName(driver);\r\n            // 2) DB 연결\r\n            conn = DriverManager.getConnection(url, userid, userpw);\r\n            // 3) SQL 작성 및 전송\r\n            String sql = \"SELECT * FROM member WHERE memId = ? AND memPw = ?\"; // 3-1) query문 작성\r\n            // 3-2) query문 전송\r\n            pstmt = conn.prepareStatement(sql);\r\n            pstmt.setString(1, member.getMemId());\r\n            pstmt.setString(2, member.getMemPw());\r\n            rs = pstmt.executeQuery();\r\n\t\r\n            while (rs.next()) {\r\n                String memId = rs.getString(\"memid\");\r\n                String memPw = rs.getString(\"mempw\");\r\n                String memMail = rs.getString(\"memMail\");\r\n                int memPurcNum = rs.getInt(\"memPurcNum\");\r\n\t\r\n                mem = new Member();\r\n                mem.setMemId(memId);\r\n                mem.setMemPw(memPw);\r\n                mem.setMemMail(memMail);\r\n                mem.setMemPurcNum(memPurcNum);\r\n            }\r\n\t\r\n        } catch (ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            try {\r\n                // 4) 자원 해제\r\n                if(rs != null) rs.close();\r\n                if(pstmt != null) pstmt.close();\r\n                if(conn != null) conn.close();\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\t\r\n        return mem;\r\n\t\r\n    }\r\n    \r\n    ...\r\n}\r\n```\r\n\r\n- Update Method\r\n\r\n```java\r\n@Repository\r\npublic class MemberDao implements IMemberDao {\r\n    ...\r\n        \r\n\t@Override\r\n    public int memberUpdate(Member member) {\r\n\t\r\n        int result = 0;\r\n\t\r\n        try {\r\n            // 1) 드라이버 로딩\r\n            Class.forName(driver);\r\n            // 2) DB 연결\r\n            conn = DriverManager.getConnection(url, userid, userpw);\r\n            // 3) SQL 작성 및 전송\r\n            String sql = \"UPDATE member SET memPw = ?, memMail = ? WHERE memId = ?\"; // 3-1) query문 작성\r\n            // 3-2) query문 전송\r\n            pstmt = conn.prepareStatement(sql);\r\n            pstmt.setString(1, member.getMemPw());\r\n            pstmt.setString(2, member.getMemMail());\r\n            pstmt.setString(3, member.getMemId());\r\n            result = pstmt.executeUpdate(); // 성공한 횟수가 result로 return됨 (1이 return 됨)\r\n\t\r\n        } catch (ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            try {\r\n                // 4) 자원 해제\r\n                if(pstmt != null) pstmt.close();\r\n                if(conn != null) conn.close();\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\t\r\n        return result;\r\n\t\r\n    }\r\n\t\r\n    ...\r\n}\r\n```\r\n\r\n- Delete Method\r\n\r\n```java\r\n@Repository\r\npublic class MemberDao implements IMemberDao {\r\n    ...\r\n        \r\n\t@Override\r\n    public int memberDelete(Member member) {\r\n\t\r\n        int result = 0;\r\n\t\r\n        try {\r\n            // 1) 드라이버 로딩\r\n            Class.forName(driver);\r\n            // 2) DB 연결\r\n            conn = DriverManager.getConnection(url, userid, userpw);\r\n            // 3) SQL 작성 및 전송\r\n            String sql = \"DELETE member WHERE memId = ? AND memPw = ?\"; // 3-1) query문 작성\r\n            // 3-2) query문 전송\r\n            pstmt = conn.prepareStatement(sql);\r\n            pstmt.setString(1, member.getMemId());\r\n            pstmt.setString(2, member.getMemPw());\r\n            result = pstmt.executeUpdate(); // 성공한 횟수가 result로 return됨 (1이 return 됨)\r\n\t\r\n        } catch (ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            try {\r\n                // 4) 자원 해제\r\n                if(pstmt != null) pstmt.close();\r\n                if(conn != null) conn.close();\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\t\r\n        return result;\r\n\t\r\n    }\r\n    \r\n    ...\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## 출처\r\n\r\n인프런 - 자바 스프링 프레임워크(renew ver.) - 신입 프로그래머를 위한 강좌\r\n\r\nhttps://velog.io/@kyukim/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EA%B7%9C%EC%95%BD%EA%B3%BC-JDBC%EC%9D%98-%EA%B4%80%EA%B3%84\r\n\r\nhttps://kouzie.github.io/jdbc/JDBC.-1%EC%9D%BC%EC%B0%A8/#jdbc-driver\r\n\r\nhttps://allg.tistory.com/20\r\n\r\nhttps://www.progress.com/faqs/datadirect-jdbc-faqs/how-does-jdbc-work\r\n","documentTitle":"[Spring] JDBC","index":[{"type":"type1","data":" [Spring] JDBC"},{"type":"type2","data":" JDBC (Java Database Connectivity)"},{"type":"type2","data":" Connection Flow"},{"type":"type2","data":" 예시 - DAO 파일"},{"type":"type2","data":" 출처"}]},"__N_SSG":true}